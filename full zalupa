import pygame.mixer
from ursina import *

app = Ursina()
camera.ortho = True
camera.fov = 40
pygame.mixer.init()
pygame.mixer.music.load('noplaynogay.mp3')
pygame.mixer.music.play(-1)

import pygame

pygame.init()
screen = pygame.display.set_mode((900, 600))
pygame.display.set_caption("A-class: Turbocharged Triumph")
icon = pygame.image.load('assets/aclassgame.webp')
pygame.display.set_icon(icon)
font = pygame.font.Font('assets/ProtestGuerrilla-Regular.ttf', 40)
text_surface = font.render('A-class: Turbocharged Triumph', True, (64, 58, 43))
bg = pygame.image.load('assets/gamebg.jpeg')

class Button:
    def __init__(self, x, y, width, height, text, color, hover_color, action=None):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text
        self.color = color
        self.hover_color = hover_color
        self.action = action

    def draw(self):
        mouse_pos = pygame.mouse.get_pos()
        if self.x < mouse_pos[0] < self.x + self.width and self.y < mouse_pos[1] < self.y + self.height:
            pygame.draw.rect(screen, self.hover_color, (self.x, self.y, self.width, self.height))
            if pygame.mouse.get_pressed()[0] == 1 and self.action:
                self.action()
        else:
            pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))

        text = font.render(self.text, True, (255, 255, 255))
        text_rect = text.get_rect(center=(self.x + self.width // 2, self.y + self.height // 2))
        screen.blit(text, text_rect)

def start_game():
    global menu_active
    menu_active = False

def game_loop():
    pass

start_button = Button(400, 300, 100, 50, 'Start', (0, 0, 255), (0, 0, 150), action=start_game)

menu_active = True
while menu_active:
    screen.blit(bg, (0, 0))
    screen.blit(text_surface, (180, 100))
    start_button.draw()
    pygame.display.update()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            menu_active = False
            pygame.quit()

game_loop()
pygame.quit()

lives = 3
invulnerable = False

car = Entity(
    model='quad',
    texture='assets/car2.png',
    collider='box',
    scale=(2, 1),
    rotation_z=-90
)

road1 = Entity(
    model='quad',
    texture='assets/roadnew.png',
    scale=15,
    z=1
)

road2 = duplicate(road1, y=15)
pair = [road1, road2]

enemies = []

def newEnemy():
    val = random.uniform(-2, 2)
    new = duplicate(
        car,
        texture='assets/car3.png',
        x=2 * val,
        y=25,
        color=color.random_color(),
        rotation_z=90 if val < 0 else -90
    )
    enemies.append(new)
    invoke(newEnemy, delay=0.5)

newEnemy()

collision_this_frame = False

def handle_collisions():
    global lives, collision_this_frame, invulnerable
    for enemy in enemies:
        if car.intersects(enemy).hit and not collision_this_frame and not invulnerable:
            car.shake()
            lives -= 1
            lives_text.text = f'Lives: {lives}'
            if lives == 0:
                game_over_text.enabled = True
                app.paused = True
                app.quit()

            invulnerable = True
            invoke(set_invulnerable_false, delay=1.5)
            collision_this_frame = True
            return
    collision_this_frame = False

def set_invulnerable_false():
    global invulnerable
    invulnerable = False

def start_game():
    start_button.enabled = False
    game_over_text.enabled = False
    app.paused = False

lives_text = Text(text=f'Lives: {lives}', origin=(0, 1), y=-.4, color=color.black)
game_over_text = Text(text='Game Over', origin=(0, 0), y=-.4, color=color.black, enabled=False)

def show_game_over():
    game_over_text.enabled = True
    app.paused = True
    invoke(app.quit, delay=5)

game_over_text.show_game_over = show_game_over

def update():
    global invulnerable
    car.x -= held_keys['a'] * 5 * time.dt
    car.x += held_keys['d'] * 5 * time.dt

    if held_keys['w']:
        if car.y + 5 * time.dt <= 10:
            car.y += 5 * time.dt
    if held_keys['s']:
        if car.y - 6 * time.dt >= -10:
            car.y -= 6 * time.dt

    for road in pair:
        road.y -= 6 * time.dt
        if road.y < -15:
            road.y += 30

    for enemy in enemies:
        if enemy.x < 0:
            enemy.y -= 10 * time.dt
        else:
            enemy.y -= 5 * time.dt
        if enemy.y < -10:
            enemies.remove(enemy)
            destroy(enemy)

    handle_collisions()
    if invulnerable:
        car.color = color.blue
    else:
        car.color = color.white

app.run()
